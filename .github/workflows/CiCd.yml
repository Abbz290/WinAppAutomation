
name: CI/CD for DevExpress XPO WinForms App

on:
  push:
    branches:
      - master  # Trigger on pushes to the master branch
  pull_request:
    branches:
      - master  # Trigger on pull requests to the master branch

jobs:
  build:
    runs-on: self-hosted  # Use the self-hosted runner

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Set up .NET 8.0
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '8.0'  # Set to .NET 8.0

    - name: Install NuGet
      run: |
        Invoke-WebRequest -Uri https://dist.nuget.org/win-x86-commandline/latest/nuget.exe -OutFile nuget.exe
        $env:Path += ";$PWD"
         
    - name: Restore Dependencies
      run: dotnet restore WinAppAutomation.sln

    - name: Build the Application
      run: dotnet build WinAppAutomation.sln --configuration Release

    - name: Run Tests with Coverage Check
      run: |
        # Run tests and collect code coverage
        dotnet test PersonTests/PersonTests.csproj --configuration Release --collect:"XPlat Code Coverage" --results-directory ./TestResults

        # Generate coverage report
        reportgenerator -reports:TestResults/**/coverage.cobertura.xml -targetdir:CoverageReport

        # Check coverage threshold
        $coverageReportPath = "./CoverageReport/index.htm"
        if (Test-Path $coverageReportPath) {
          $coverage = (Get-Content -Path $coverageReportPath | Select-String -Pattern "Line coverage: (\d+)%").Matches.Groups[1].Value
          Write-Host "Coverage: $coverage%"
          if ([int]$coverage -lt 80) {
            Write-Error "Test coverage ($coverage%) is below 80%. Failing the build."
            exit 1
          } else {
            Write-Host "Test coverage ($coverage%) meets the threshold. Proceeding."
          }
        } else {
          Write-Error "Coverage report not found. Failing the build."
          exit 1
        }

    - name: Deploy Application Locally
      run: |
        echo "Deploying build files locally..."
        # Ensure the destination folder exists
        if (-not (Test-Path -Path "C:\Deployments\WinAppAutomation")) {
          New-Item -Path "C:\Deployments\WinAppAutomation" -ItemType Directory
        }
        # Copy the files to the destination
        Copy-Item -Path .\WinAppAutomation.Win\bin\Release\net8.0-windows\* -Destination "C:\Deployments\WinAppAutomation\" -Recurse -Force
        echo "Deployment completed successfully."

    - name: Run the Application
      if: success()  # Only run if previous steps succeeded
      run: |
        echo "Starting the application..."
        # Start the application locally
        start C:\Deployments\WinAppAutomation\WinAppAutomation.Win.exe
